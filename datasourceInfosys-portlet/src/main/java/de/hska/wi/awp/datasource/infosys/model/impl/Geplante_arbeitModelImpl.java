package de.hska.wi.awp.datasource.infosys.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.hska.wi.awp.datasource.infosys.model.Geplante_arbeit;
import de.hska.wi.awp.datasource.infosys.model.Geplante_arbeitModel;
import de.hska.wi.awp.datasource.infosys.model.Geplante_arbeitSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Geplante_arbeit service. Represents a row in the &quot;datasourceInfosys_Geplante_arbeit&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.hska.wi.awp.datasource.infosys.model.Geplante_arbeitModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Geplante_arbeitImpl}.
 * </p>
 *
 * @author Daniel Storch
 * @see Geplante_arbeitImpl
 * @see de.hska.wi.awp.datasource.infosys.model.Geplante_arbeit
 * @see de.hska.wi.awp.datasource.infosys.model.Geplante_arbeitModel
 * @generated
 */
@JSON(strict = true)
public class Geplante_arbeitModelImpl extends BaseModelImpl<Geplante_arbeit>
    implements Geplante_arbeitModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a geplante_arbeit model instance should use the {@link de.hska.wi.awp.datasource.infosys.model.Geplante_arbeit} interface instead.
     */
    public static final String TABLE_NAME = "datasourceInfosys_Geplante_arbeit";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "statusbericht_id", Types.BIGINT },
            { "verantwortlicher", Types.BIGINT },
            { "arbeit", Types.VARCHAR },
            { "bis_wann", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table datasourceInfosys_Geplante_arbeit (id_ LONG not null primary key,statusbericht_id LONG,verantwortlicher LONG,arbeit VARCHAR(75) null,bis_wann DATE null)";
    public static final String TABLE_SQL_DROP = "drop table datasourceInfosys_Geplante_arbeit";
    public static final String ORDER_BY_JPQL = " ORDER BY geplante_arbeit.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY datasourceInfosys_Geplante_arbeit.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.de.hska.wi.awp.datasource.infosys.model.Geplante_arbeit"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.de.hska.wi.awp.datasource.infosys.model.Geplante_arbeit"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.de.hska.wi.awp.datasource.infosys.model.Geplante_arbeit"));
    private static ClassLoader _classLoader = Geplante_arbeit.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Geplante_arbeit.class
        };
    private long _id;
    private long _statusbericht_id;
    private long _verantwortlicher;
    private String _arbeit;
    private Date _bis_wann;
    private Geplante_arbeit _escapedModel;

    public Geplante_arbeitModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Geplante_arbeit toModel(Geplante_arbeitSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Geplante_arbeit model = new Geplante_arbeitImpl();

        model.setId(soapModel.getId());
        model.setStatusbericht_id(soapModel.getStatusbericht_id());
        model.setVerantwortlicher(soapModel.getVerantwortlicher());
        model.setArbeit(soapModel.getArbeit());
        model.setBis_wann(soapModel.getBis_wann());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Geplante_arbeit> toModels(
        Geplante_arbeitSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Geplante_arbeit> models = new ArrayList<Geplante_arbeit>(soapModels.length);

        for (Geplante_arbeitSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Geplante_arbeit.class;
    }

    @Override
    public String getModelClassName() {
        return Geplante_arbeit.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("statusbericht_id", getStatusbericht_id());
        attributes.put("verantwortlicher", getVerantwortlicher());
        attributes.put("arbeit", getArbeit());
        attributes.put("bis_wann", getBis_wann());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long statusbericht_id = (Long) attributes.get("statusbericht_id");

        if (statusbericht_id != null) {
            setStatusbericht_id(statusbericht_id);
        }

        Long verantwortlicher = (Long) attributes.get("verantwortlicher");

        if (verantwortlicher != null) {
            setVerantwortlicher(verantwortlicher);
        }

        String arbeit = (String) attributes.get("arbeit");

        if (arbeit != null) {
            setArbeit(arbeit);
        }

        Date bis_wann = (Date) attributes.get("bis_wann");

        if (bis_wann != null) {
            setBis_wann(bis_wann);
        }
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @JSON
    @Override
    public long getStatusbericht_id() {
        return _statusbericht_id;
    }

    @Override
    public void setStatusbericht_id(long statusbericht_id) {
        _statusbericht_id = statusbericht_id;
    }

    @JSON
    @Override
    public long getVerantwortlicher() {
        return _verantwortlicher;
    }

    @Override
    public void setVerantwortlicher(long verantwortlicher) {
        _verantwortlicher = verantwortlicher;
    }

    @JSON
    @Override
    public String getArbeit() {
        if (_arbeit == null) {
            return StringPool.BLANK;
        } else {
            return _arbeit;
        }
    }

    @Override
    public void setArbeit(String arbeit) {
        _arbeit = arbeit;
    }

    @JSON
    @Override
    public Date getBis_wann() {
        return _bis_wann;
    }

    @Override
    public void setBis_wann(Date bis_wann) {
        _bis_wann = bis_wann;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Geplante_arbeit.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Geplante_arbeit toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Geplante_arbeit) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        Geplante_arbeitImpl geplante_arbeitImpl = new Geplante_arbeitImpl();

        geplante_arbeitImpl.setId(getId());
        geplante_arbeitImpl.setStatusbericht_id(getStatusbericht_id());
        geplante_arbeitImpl.setVerantwortlicher(getVerantwortlicher());
        geplante_arbeitImpl.setArbeit(getArbeit());
        geplante_arbeitImpl.setBis_wann(getBis_wann());

        geplante_arbeitImpl.resetOriginalValues();

        return geplante_arbeitImpl;
    }

    @Override
    public int compareTo(Geplante_arbeit geplante_arbeit) {
        long primaryKey = geplante_arbeit.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Geplante_arbeit)) {
            return false;
        }

        Geplante_arbeit geplante_arbeit = (Geplante_arbeit) obj;

        long primaryKey = geplante_arbeit.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Geplante_arbeit> toCacheModel() {
        Geplante_arbeitCacheModel geplante_arbeitCacheModel = new Geplante_arbeitCacheModel();

        geplante_arbeitCacheModel.id = getId();

        geplante_arbeitCacheModel.statusbericht_id = getStatusbericht_id();

        geplante_arbeitCacheModel.verantwortlicher = getVerantwortlicher();

        geplante_arbeitCacheModel.arbeit = getArbeit();

        String arbeit = geplante_arbeitCacheModel.arbeit;

        if ((arbeit != null) && (arbeit.length() == 0)) {
            geplante_arbeitCacheModel.arbeit = null;
        }

        Date bis_wann = getBis_wann();

        if (bis_wann != null) {
            geplante_arbeitCacheModel.bis_wann = bis_wann.getTime();
        } else {
            geplante_arbeitCacheModel.bis_wann = Long.MIN_VALUE;
        }

        return geplante_arbeitCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", statusbericht_id=");
        sb.append(getStatusbericht_id());
        sb.append(", verantwortlicher=");
        sb.append(getVerantwortlicher());
        sb.append(", arbeit=");
        sb.append(getArbeit());
        sb.append(", bis_wann=");
        sb.append(getBis_wann());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("de.hska.wi.awp.datasource.infosys.model.Geplante_arbeit");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusbericht_id</column-name><column-value><![CDATA[");
        sb.append(getStatusbericht_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>verantwortlicher</column-name><column-value><![CDATA[");
        sb.append(getVerantwortlicher());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>arbeit</column-name><column-value><![CDATA[");
        sb.append(getArbeit());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bis_wann</column-name><column-value><![CDATA[");
        sb.append(getBis_wann());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
