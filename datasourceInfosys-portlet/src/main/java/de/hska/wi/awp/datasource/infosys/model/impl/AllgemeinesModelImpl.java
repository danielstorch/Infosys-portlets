package de.hska.wi.awp.datasource.infosys.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.hska.wi.awp.datasource.infosys.model.Allgemeines;
import de.hska.wi.awp.datasource.infosys.model.AllgemeinesModel;
import de.hska.wi.awp.datasource.infosys.model.AllgemeinesSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Allgemeines service. Represents a row in the &quot;datasourceInfosys_Allgemeines&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.hska.wi.awp.datasource.infosys.model.AllgemeinesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AllgemeinesImpl}.
 * </p>
 *
 * @author Daniel Storch
 * @see AllgemeinesImpl
 * @see de.hska.wi.awp.datasource.infosys.model.Allgemeines
 * @see de.hska.wi.awp.datasource.infosys.model.AllgemeinesModel
 * @generated
 */
@JSON(strict = true)
public class AllgemeinesModelImpl extends BaseModelImpl<Allgemeines>
    implements AllgemeinesModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a allgemeines model instance should use the {@link de.hska.wi.awp.datasource.infosys.model.Allgemeines} interface instead.
     */
    public static final String TABLE_NAME = "datasourceInfosys_Allgemeines";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "statusbericht_id", Types.BIGINT },
            { "probleme_risiken", Types.VARCHAR },
            { "massnahmen", Types.VARCHAR },
            { "situation", Types.VARCHAR },
            { "gruende", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table datasourceInfosys_Allgemeines (id_ LONG not null primary key,statusbericht_id LONG,probleme_risiken VARCHAR(75) null,massnahmen VARCHAR(75) null,situation VARCHAR(500) null,gruende VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table datasourceInfosys_Allgemeines";
    public static final String ORDER_BY_JPQL = " ORDER BY allgemeines.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY datasourceInfosys_Allgemeines.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.de.hska.wi.awp.datasource.infosys.model.Allgemeines"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.de.hska.wi.awp.datasource.infosys.model.Allgemeines"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.de.hska.wi.awp.datasource.infosys.model.Allgemeines"),
            true);
    public static long STATUSBERICHT_ID_COLUMN_BITMASK = 1L;
    public static long ID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.de.hska.wi.awp.datasource.infosys.model.Allgemeines"));
    private static ClassLoader _classLoader = Allgemeines.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Allgemeines.class
        };
    private long _id;
    private long _statusbericht_id;
    private long _originalStatusbericht_id;
    private boolean _setOriginalStatusbericht_id;
    private String _probleme_risiken;
    private String _massnahmen;
    private String _situation;
    private String _gruende;
    private long _columnBitmask;
    private Allgemeines _escapedModel;

    public AllgemeinesModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Allgemeines toModel(AllgemeinesSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Allgemeines model = new AllgemeinesImpl();

        model.setId(soapModel.getId());
        model.setStatusbericht_id(soapModel.getStatusbericht_id());
        model.setProbleme_risiken(soapModel.getProbleme_risiken());
        model.setMassnahmen(soapModel.getMassnahmen());
        model.setSituation(soapModel.getSituation());
        model.setGruende(soapModel.getGruende());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Allgemeines> toModels(AllgemeinesSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Allgemeines> models = new ArrayList<Allgemeines>(soapModels.length);

        for (AllgemeinesSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Allgemeines.class;
    }

    @Override
    public String getModelClassName() {
        return Allgemeines.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("statusbericht_id", getStatusbericht_id());
        attributes.put("probleme_risiken", getProbleme_risiken());
        attributes.put("massnahmen", getMassnahmen());
        attributes.put("situation", getSituation());
        attributes.put("gruende", getGruende());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long statusbericht_id = (Long) attributes.get("statusbericht_id");

        if (statusbericht_id != null) {
            setStatusbericht_id(statusbericht_id);
        }

        String probleme_risiken = (String) attributes.get("probleme_risiken");

        if (probleme_risiken != null) {
            setProbleme_risiken(probleme_risiken);
        }

        String massnahmen = (String) attributes.get("massnahmen");

        if (massnahmen != null) {
            setMassnahmen(massnahmen);
        }

        String situation = (String) attributes.get("situation");

        if (situation != null) {
            setSituation(situation);
        }

        String gruende = (String) attributes.get("gruende");

        if (gruende != null) {
            setGruende(gruende);
        }
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @JSON
    @Override
    public long getStatusbericht_id() {
        return _statusbericht_id;
    }

    @Override
    public void setStatusbericht_id(long statusbericht_id) {
        _columnBitmask |= STATUSBERICHT_ID_COLUMN_BITMASK;

        if (!_setOriginalStatusbericht_id) {
            _setOriginalStatusbericht_id = true;

            _originalStatusbericht_id = _statusbericht_id;
        }

        _statusbericht_id = statusbericht_id;
    }

    public long getOriginalStatusbericht_id() {
        return _originalStatusbericht_id;
    }

    @JSON
    @Override
    public String getProbleme_risiken() {
        if (_probleme_risiken == null) {
            return StringPool.BLANK;
        } else {
            return _probleme_risiken;
        }
    }

    @Override
    public void setProbleme_risiken(String probleme_risiken) {
        _probleme_risiken = probleme_risiken;
    }

    @JSON
    @Override
    public String getMassnahmen() {
        if (_massnahmen == null) {
            return StringPool.BLANK;
        } else {
            return _massnahmen;
        }
    }

    @Override
    public void setMassnahmen(String massnahmen) {
        _massnahmen = massnahmen;
    }

    @JSON
    @Override
    public String getSituation() {
        if (_situation == null) {
            return StringPool.BLANK;
        } else {
            return _situation;
        }
    }

    @Override
    public void setSituation(String situation) {
        _situation = situation;
    }

    @JSON
    @Override
    public String getGruende() {
        if (_gruende == null) {
            return StringPool.BLANK;
        } else {
            return _gruende;
        }
    }

    @Override
    public void setGruende(String gruende) {
        _gruende = gruende;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Allgemeines.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Allgemeines toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Allgemeines) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        AllgemeinesImpl allgemeinesImpl = new AllgemeinesImpl();

        allgemeinesImpl.setId(getId());
        allgemeinesImpl.setStatusbericht_id(getStatusbericht_id());
        allgemeinesImpl.setProbleme_risiken(getProbleme_risiken());
        allgemeinesImpl.setMassnahmen(getMassnahmen());
        allgemeinesImpl.setSituation(getSituation());
        allgemeinesImpl.setGruende(getGruende());

        allgemeinesImpl.resetOriginalValues();

        return allgemeinesImpl;
    }

    @Override
    public int compareTo(Allgemeines allgemeines) {
        long primaryKey = allgemeines.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Allgemeines)) {
            return false;
        }

        Allgemeines allgemeines = (Allgemeines) obj;

        long primaryKey = allgemeines.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        AllgemeinesModelImpl allgemeinesModelImpl = this;

        allgemeinesModelImpl._originalStatusbericht_id = allgemeinesModelImpl._statusbericht_id;

        allgemeinesModelImpl._setOriginalStatusbericht_id = false;

        allgemeinesModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Allgemeines> toCacheModel() {
        AllgemeinesCacheModel allgemeinesCacheModel = new AllgemeinesCacheModel();

        allgemeinesCacheModel.id = getId();

        allgemeinesCacheModel.statusbericht_id = getStatusbericht_id();

        allgemeinesCacheModel.probleme_risiken = getProbleme_risiken();

        String probleme_risiken = allgemeinesCacheModel.probleme_risiken;

        if ((probleme_risiken != null) && (probleme_risiken.length() == 0)) {
            allgemeinesCacheModel.probleme_risiken = null;
        }

        allgemeinesCacheModel.massnahmen = getMassnahmen();

        String massnahmen = allgemeinesCacheModel.massnahmen;

        if ((massnahmen != null) && (massnahmen.length() == 0)) {
            allgemeinesCacheModel.massnahmen = null;
        }

        allgemeinesCacheModel.situation = getSituation();

        String situation = allgemeinesCacheModel.situation;

        if ((situation != null) && (situation.length() == 0)) {
            allgemeinesCacheModel.situation = null;
        }

        allgemeinesCacheModel.gruende = getGruende();

        String gruende = allgemeinesCacheModel.gruende;

        if ((gruende != null) && (gruende.length() == 0)) {
            allgemeinesCacheModel.gruende = null;
        }

        return allgemeinesCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", statusbericht_id=");
        sb.append(getStatusbericht_id());
        sb.append(", probleme_risiken=");
        sb.append(getProbleme_risiken());
        sb.append(", massnahmen=");
        sb.append(getMassnahmen());
        sb.append(", situation=");
        sb.append(getSituation());
        sb.append(", gruende=");
        sb.append(getGruende());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("de.hska.wi.awp.datasource.infosys.model.Allgemeines");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusbericht_id</column-name><column-value><![CDATA[");
        sb.append(getStatusbericht_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>probleme_risiken</column-name><column-value><![CDATA[");
        sb.append(getProbleme_risiken());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>massnahmen</column-name><column-value><![CDATA[");
        sb.append(getMassnahmen());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>situation</column-name><column-value><![CDATA[");
        sb.append(getSituation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>gruende</column-name><column-value><![CDATA[");
        sb.append(getGruende());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
