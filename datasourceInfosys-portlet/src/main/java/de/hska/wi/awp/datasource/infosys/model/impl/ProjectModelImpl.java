package de.hska.wi.awp.datasource.infosys.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.hska.wi.awp.datasource.infosys.model.Project;
import de.hska.wi.awp.datasource.infosys.model.ProjectModel;
import de.hska.wi.awp.datasource.infosys.model.ProjectSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Project service. Represents a row in the &quot;datasourceInfosys_Project&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.hska.wi.awp.datasource.infosys.model.ProjectModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectImpl}.
 * </p>
 *
 * @author Daniel Storch
 * @see ProjectImpl
 * @see de.hska.wi.awp.datasource.infosys.model.Project
 * @see de.hska.wi.awp.datasource.infosys.model.ProjectModel
 * @generated
 */
@JSON(strict = true)
public class ProjectModelImpl extends BaseModelImpl<Project>
    implements ProjectModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a project model instance should use the {@link de.hska.wi.awp.datasource.infosys.model.Project} interface instead.
     */
    public static final String TABLE_NAME = "datasourceInfosys_Project";
    public static final Object[][] TABLE_COLUMNS = {
            { "name", Types.VARCHAR },
            { "projecthskaId", Types.VARCHAR },
            { "id_", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table datasourceInfosys_Project (name VARCHAR(75) null,projecthskaId VARCHAR(75) null,id_ LONG not null primary key)";
    public static final String TABLE_SQL_DROP = "drop table datasourceInfosys_Project";
    public static final String ORDER_BY_JPQL = " ORDER BY project.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY datasourceInfosys_Project.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.de.hska.wi.awp.datasource.infosys.model.Project"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.de.hska.wi.awp.datasource.infosys.model.Project"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.de.hska.wi.awp.datasource.infosys.model.Project"));
    private static ClassLoader _classLoader = Project.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Project.class
        };
    private String _name;
    private String _projecthskaId;
    private long _id;
    private Project _escapedModel;

    public ProjectModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Project toModel(ProjectSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Project model = new ProjectImpl();

        model.setName(soapModel.getName());
        model.setProjecthskaId(soapModel.getProjecthskaId());
        model.setId(soapModel.getId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Project> toModels(ProjectSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Project> models = new ArrayList<Project>(soapModels.length);

        for (ProjectSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Project.class;
    }

    @Override
    public String getModelClassName() {
        return Project.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("name", getName());
        attributes.put("projecthskaId", getProjecthskaId());
        attributes.put("id", getId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String projecthskaId = (String) attributes.get("projecthskaId");

        if (projecthskaId != null) {
            setProjecthskaId(projecthskaId);
        }

        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @JSON
    @Override
    public String getProjecthskaId() {
        if (_projecthskaId == null) {
            return StringPool.BLANK;
        } else {
            return _projecthskaId;
        }
    }

    @Override
    public void setProjecthskaId(String projecthskaId) {
        _projecthskaId = projecthskaId;
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Project.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Project toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Project) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ProjectImpl projectImpl = new ProjectImpl();

        projectImpl.setName(getName());
        projectImpl.setProjecthskaId(getProjecthskaId());
        projectImpl.setId(getId());

        projectImpl.resetOriginalValues();

        return projectImpl;
    }

    @Override
    public int compareTo(Project project) {
        long primaryKey = project.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Project)) {
            return false;
        }

        Project project = (Project) obj;

        long primaryKey = project.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Project> toCacheModel() {
        ProjectCacheModel projectCacheModel = new ProjectCacheModel();

        projectCacheModel.name = getName();

        String name = projectCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            projectCacheModel.name = null;
        }

        projectCacheModel.projecthskaId = getProjecthskaId();

        String projecthskaId = projectCacheModel.projecthskaId;

        if ((projecthskaId != null) && (projecthskaId.length() == 0)) {
            projectCacheModel.projecthskaId = null;
        }

        projectCacheModel.id = getId();

        return projectCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{name=");
        sb.append(getName());
        sb.append(", projecthskaId=");
        sb.append(getProjecthskaId());
        sb.append(", id=");
        sb.append(getId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("de.hska.wi.awp.datasource.infosys.model.Project");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>projecthskaId</column-name><column-value><![CDATA[");
        sb.append(getProjecthskaId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
